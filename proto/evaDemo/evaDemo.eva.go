// Code generated by protoc-gen-eva. DO NOT EDIT.
// source: evaDemo.proto

package evaDemo

import (
	"context"
	"fmt"
	"github.com/Gitforxuyang/eva/client/selector"
	"github.com/Gitforxuyang/eva/config"
	"github.com/Gitforxuyang/eva/registory/etcd"
	"github.com/Gitforxuyang/eva/server"
	trace2 "github.com/Gitforxuyang/eva/util/trace"
	"github.com/Gitforxuyang/eva/util/utils"
	"github.com/Gitforxuyang/eva/wrapper/catch"
	"github.com/Gitforxuyang/eva/wrapper/log"
	"github.com/Gitforxuyang/eva/wrapper/trace"
	"google.golang.org/grpc"
	"google.golang.org/grpc/keepalive"
	"time"
)

//获取服务的描述信息
func GetServerDesc() *etcd.Service {
	messageMap := make(map[string]map[string]string, 2)
	messageNil := make(map[string]string)
	messageMap["Nil"] = messageNil
	messageHelloReq := make(map[string]string)
	messageHelloReq["name"] = "TYPE_STRING"
	messageHelloReq["age"] = "TYPE_INT32"
	messageHelloReq["c"] = ".evaDemo.HelloReq.Content"
	messageMap["HelloReq"] = messageHelloReq
	service := new(etcd.Service)
	service.Name = "EvaDemo"
	service.Package = "evaDemo"
	service.AppId = "evaDemo"
	service.Methods = make(map[string]etcd.Method, 2)
	methodPing := etcd.Method{}
	methodPing.Req = messageMap["Nil"]
	methodPing.Resp = messageMap["Nil"]
	service.Methods["Ping"] = methodPing
	methodHello := etcd.Method{}
	methodHello.Req = messageMap["HelloReq"]
	methodHello.Resp = messageMap["Nil"]
	service.Methods["Hello"] = methodHello
	return service
}

type GRpcEvaDemoClient interface {
	Ping(ctx context.Context, req *Nil) (resp *Nil, err error)
	Hello(ctx context.Context, req *HelloReq) (resp *Nil, err error)
}
type grpcEvaDemoClient struct {
	client EvaDemoClient
}

func (m *grpcEvaDemoClient) Ping(ctx context.Context, req *Nil) (resp *Nil, err error) {
	resp, err = m.client.Ping(ctx, req)
	return resp, err
}
func (m *grpcEvaDemoClient) Hello(ctx context.Context, req *HelloReq) (resp *Nil, err error) {
	resp, err = m.client.Hello(ctx, req)
	return resp, err
}
func GetGRpcEvaDemoClient() GRpcEvaDemoClient {
	tracer := trace2.GetTracer()
	grpcClientConfig := config.GetConfig().GetGRpc("EvaDemo")
	conn, err := grpc.Dial(fmt.Sprintf("%s", grpcClientConfig.Endpoint),
		grpc.WithInsecure(),
		grpc.WithBalancer(grpc.RoundRobin(selector.NewCustomResolverBuilder(grpcClientConfig.Mode).GetResolver(grpcClientConfig.Endpoint))),
		grpc.WithKeepaliveParams(
			keepalive.ClientParameters{
				Time:                time.Second * 10,
				Timeout:             time.Second * 1,
				PermitWithoutStream: true,
			}),
		grpc.WithChainUnaryInterceptor(
			trace.NewClientWrapper(tracer),
			log.NewClientWrapper(),
			catch.NewClientWrapper(grpcClientConfig.Timeout),
		),
	)
	c := &grpcEvaDemoClient{}
	c.client = NewEvaDemoClient(conn)
	utils.Must(err)
	server.RegisterShutdownFunc(func() {
		conn.Close()
	})
	return c
}
